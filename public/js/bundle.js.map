{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Functions.ts","src/Game.ts","src/ObjectPool.ts","src/entities/Cat.ts","src/entities/Entity.ts","src/entities/Fish.ts","src/main.ts","src/managers/DataManager.ts","src/managers/LoadManager.ts","src/managers/ScreenManager.ts","src/screens/EndScreen.ts","src/screens/GameScreen.ts","src/screens/IntermediaryScreen.ts","src/screens/MenuScreen.ts","src/screens/Screen.ts","src/screens/SplashScreen.ts","src/ui/Sprites.ts","src/ui/custom/LevelSelectDisplay.ts","src/ui/display/Container.ts","src/ui/display/Layout.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* ************************************************* */\r\n/*                      LOGGING                      */\r\n/* ************************************************* */\r\nexport class Logging {\r\n    static success(message:string):void {\r\n        console.log(`%c ${message}`, 'color:seagreen; font-size:1.1em; font-weight:bold; border-left: solid 3px seagreen;')    ;\r\n    }\r\n\r\n    static message(message:string):void {\r\n        console.log(`%c ${message}`, 'color:#1E265C; font-size:1.1em; font-weight:bold; border-left: solid 3px #1E265C;');\r\n    }\r\n\r\n    static error(message:string):void {\r\n        console.log(`%c ${message}`, 'color:red; font-size:1.1em; border-left: solid 3px red;');\r\n    }\r\n}","import { LoadManager } from \"./managers/LoadManager\";\r\nimport { ScreenManager } from \"./managers/ScreenManager\";\r\nimport { SplashScreen } from \"./screens/SplashScreen\";\r\nimport { MenuScreen } from \"./screens/MenuScreen\";\r\nimport { GameScreen } from \"./screens/GameScreen\";\r\nimport { EndScreen } from \"./screens/EndScreen\";\r\nimport { Logging } from \"./Functions\";\r\nimport { Sprites } from \"./ui/Sprites\";\r\nimport { IntermediaryScreen } from \"./screens/IntermediaryScreen\";\r\nimport { DataManager } from \"./managers/DataManager\";\r\n\r\n\r\nexport class Game {\r\n    private _canvas:HTMLCanvasElement;\r\n    private _stage:createjs.StageGL;\r\n    private _scaling:number;\r\n\r\n    private _lastGameTime:number;\r\n\r\n    constructor(canvasDiv:HTMLCanvasElement) {\r\n\r\n        this._canvas = canvasDiv;\r\n        this._canvas.width = Game.WIDTH;\r\n        this._canvas.height = Game.HEIGHT;\r\n\r\n        this._lastGameTime = -1;\r\n\r\n        //set the scaling\r\n        this._scaling = Game.HEIGHT / 1366;\r\n\r\n        //start loading game assets\r\n        new Promise(async(res, rej) => {\r\n            //create the stage\r\n            console.log(\"Readying stage!\");\r\n            this._stage = new createjs.StageGL(this._canvas, { antialias: true });\r\n            (this._stage as any).setClearColor(\"#000000\");\r\n            this._stage.enableMouseOver(10);\r\n            this._stage.update();\r\n\r\n            console.log(this._stage, this._canvas);\r\n\r\n            //listen to asset updates\r\n            (this._stage as any).addEventListener(LoadManager.ASSETS_UPDATED, (e) => {\r\n                console.log(LoadManager.Percentage);\r\n            });\r\n            //load assets\r\n            await LoadManager.loadAssets(\"assets/manifest.json\", this._stage)\r\n                .catch(err => {\r\n                    console.warn(\"Error loading assets:\", err);\r\n                });\r\n\r\n            Logging.success(\"Assets Loaded Successfully!\");\r\n\r\n            //load level data\r\n            await DataManager.loadWorldsData(\"assets/data/levels.json\")\r\n                .catch(err => {\r\n                    Logging.error(err);\r\n                    return;\r\n                });\r\n\r\n            Logging.success(\"Level Data Loaded Successfully!\");\r\n\r\n            //setup createjs.Sprites\r\n            await Sprites.setup();\r\n\r\n            //build the screens\r\n            ScreenManager.registerScreen(\"splash\", new SplashScreen());\r\n            ScreenManager.registerScreen(\"menu\", new MenuScreen(this));\r\n            ScreenManager.registerScreen(\"game\", new GameScreen(this));\r\n            ScreenManager.registerScreen(\"end\", new EndScreen());\r\n            ScreenManager.registerScreen(\"intermediary\", new IntermediaryScreen(this));\r\n\r\n            \r\n\r\n            \r\n            //set the current screen\r\n            //game test, load desired level patch -- if autoloading to game screen\r\n            (ScreenManager.getScreenByKey(\"game\") as GameScreen).LevelData = DataManager.getLevelDataByIndex(1);\r\n\r\n            ScreenManager.setCurrentScreen(\"game\", this._stage);\r\n\r\n            //setup the game loop\r\n            createjs.Ticker.framerate = Game.FRAME_RATE;\r\n            createjs.Ticker.on(\"tick\", this.update, this);\r\n\r\n        });\r\n    }\r\n\r\n\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    public update(e:any) {\r\n\r\n        const gameTime = (this._lastGameTime != -1) ? createjs.Ticker.getMeasuredFPS() - this._lastGameTime : 1;\r\n        this._lastGameTime = createjs.Ticker.getMeasuredFPS();\r\n\r\n        //update the screen\r\n        if(ScreenManager.CurrentScreen != null) ScreenManager.CurrentScreen.update(gameTime);\r\n\r\n        //update the stage\r\n        this._stage.update();\r\n    }\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public static get FRAME_RATE() { return 30; }\r\n    public static get WIDTH() { return document.body.clientHeight * 0.48; } //desired size\r\n    public static get HEIGHT() { return document.body.clientHeight; }\r\n\r\n    public get StageWidth() { return this._canvas.width; } //actual size\r\n    public get StageHeight() { return this._canvas.height; }\r\n\r\n    public get Stage() { return this._stage; }\r\n    public get Scaling() { return this._scaling; }\r\n\r\n\r\n\r\n\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n\r\n\r\n}","import { Logging } from \"./Functions\";\r\nimport { Entity } from \"./entities/Entity\";\r\n\r\nexport interface IPoolObject {\r\n    type:string;\r\n    obj:Entity,\r\n    active:boolean;\r\n}\r\n\r\nexport class ObjectPool {\r\n    private static _pool:IPoolObject[];\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    /**Creates a pool object. */\r\n    public static createPoolObject(obj:Entity, type:string) {\r\n        const poolObj = {\r\n            type,\r\n            obj,\r\n            active: false\r\n        };\r\n        ObjectPool.Pool.push(poolObj);\r\n        return poolObj;\r\n    }\r\n\r\n    /**Checks out a pool object.  Use POOL global function to access. */\r\n    public static checkout(type:string) {\r\n        const poolObj = ObjectPool._getObjectByType(type);\r\n        if(poolObj != null) {\r\n            poolObj.active = true;\r\n            return poolObj.obj;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**Returns an object to the pool. */\r\n    public static return(obj:Entity) {\r\n        const poolObj = ObjectPool._getObjectByObj(obj);\r\n        if(poolObj != null) {\r\n            poolObj.active = false;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public static _getObjectByType(type) {\r\n        const poolObj = ObjectPool._pool.find((o => o.type == type && !o.active));\r\n        if(poolObj == null) Logging.error(\"Object not found in pool, or pool is exhausted.  Return some objects.\");\r\n        return poolObj\r\n    }\r\n    public static _getObjectByObj(obj) {\r\n        return ObjectPool._pool.find((o => o.obj == obj));\r\n    }\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public static get Pool() { \r\n        if(ObjectPool._pool == null) ObjectPool._pool = [];\r\n        return ObjectPool._pool;\r\n    }\r\n}","import { Game } from \"../Game\";\r\nimport { Entity } from \"./Entity\";\r\nimport { LoadManager } from \"../managers/LoadManager\";\r\nimport { IEnableable } from \"../Interfaces\";\r\nimport { Logging } from \"../Functions\";\r\nimport { GameScreen } from \"../screens/GameScreen\";\r\nimport { Fish } from \"./Fish\";\r\n\r\nexport class Cat extends Entity implements IEnableable {\r\n    private _speed:number;\r\n    private _fishCaughtMultiplier:number; //this will be the rate at which the cat slows down when rising per fish\r\n\r\n    private _catYTween:createjs.Tween;\r\n    private _caughtFish:Fish[];\r\n\r\n    private _isGrabbing:boolean;\r\n    private _isRising:boolean;\r\n    private _hasReachedSurface:boolean;\r\n\r\n    constructor(gameScreen:GameScreen) {\r\n        super(gameScreen, LoadManager.Spritesheets.Cat_Spritesheet);\r\n        this._speed = 3;\r\n        this._fishCaughtMultiplier = 0.05;\r\n\r\n        this._caughtFish = [];\r\n        this._isGrabbing = false;\r\n        this._isRising = false;\r\n        this._hasReachedSurface = true;\r\n\r\n        this._sprite.gotoAndPlay(Cat.ANIMATION.Idle);\r\n    }\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    enable() {\r\n\r\n    }\r\n\r\n    disable() {\r\n\r\n    }\r\n\r\n\r\n    /***************/\r\n    /*   ACTIONS   */\r\n    /***************/\r\n    public grab() {\r\n        //cannot grab if we are not at surface\r\n        if(!this._hasReachedSurface) return;\r\n\r\n        this._isGrabbing = true;\r\n        this._hasReachedSurface = false;\r\n\r\n        //move to x position\r\n        this.X = this.GameScreen.Game.Stage.mouseX;\r\n\r\n\r\n        console.log(\"START SPEED:\", this.Speed);\r\n\r\n        //grab to y position\r\n        const speed = (this.GameScreen.Game.Stage.mouseY / 2) * this.Speed;\r\n        this._catYTween = createjs.Tween\r\n            .get(this._sprite)\r\n            .to({ y:this.GameScreen.Game.Stage.mouseY }, speed, createjs.Ease.circIn)\r\n            .call(() => {\r\n                //once the grab is done, turn off flag\r\n                this._isGrabbing = false;\r\n\r\n                 //play animations\r\n                this._sprite.gotoAndPlay(Cat.ANIMATION.Grab);\r\n                //listen for animation to finish\r\n                (this._sprite as any).on(\"animationend\", () => {\r\n                    this._sprite.gotoAndPlay(Cat.ANIMATION.Hold);\r\n                }, true);\r\n\r\n                //try to grab a fish\r\n                const fishes = this.GameScreen.tryToGrabFishes(this.X , this.Y);\r\n                //see if a fish was grabbed\r\n                if(fishes.length > 0) this.caught(fishes);\r\n                else this.returnToSurface();\r\n            });\r\n\r\n    }\r\n\r\n    /**\r\n     * Called to return cat to surface.\r\n     */\r\n    public returnToSurface() {\r\n        this._sprite.gotoAndPlay(Cat.ANIMATION.Idle);\r\n\r\n        //remove any lingering tweens\r\n        createjs.Tween.removeTweens(this._sprite);\r\n        const speed = (this.Y / 2) * this.Speed;\r\n        this._catYTween = createjs.Tween.get(this._sprite)\r\n            .wait(150)\r\n            .to({y:20}, speed, createjs.Ease.linear)\r\n            .call(() => {\r\n                //once the surface has been reached, allow x movement again\r\n                this.reachSurface();\r\n            });\r\n    }\r\n\r\n    public caught(fishes:Fish[]) {\r\n        console.log(\"I CAUGHT\");\r\n        if(fishes.length <= 0) return;\r\n        this._isRising = true;  \r\n        \r\n        let hasNewFish = false;\r\n\r\n        fishes.forEach(f => {\r\n            if(this._caughtFish.indexOf(f) != -1) return;\r\n            hasNewFish = true;\r\n            //grab the fish\r\n            f.catch();\r\n\r\n            //add fish to caught array\r\n            this._caughtFish.push(f);\r\n\r\n            //control the fish\r\n            f.Y = this.Y;\r\n        });\r\n        \r\n        console.log(\"I WAS CAUGHT, NOW RISING\");\r\n        console.log(\"FISH CAUGHT SPEED:\", this.Speed);\r\n\r\n        if(!hasNewFish) return;\r\n        \r\n        //if we grabbed a fish...\r\n        //go back up... slowly\r\n        createjs.Tween.removeTweens(this._sprite);\r\n        const speed = this.Y * this.Speed;\r\n        this._catYTween = createjs.Tween.get(this._sprite)\r\n            .wait(250)\r\n            .to({y:-20}, speed, createjs.Ease.linear)\r\n            .call(() => {\r\n                //once the surface has been reached, allow x movement again\r\n                this.reachSurface();\r\n                this._isRising = false;\r\n            });\r\n\r\n    }\r\n    public drop() {\r\n        //release the fish\r\n        // this._caughtFish.dropped();\r\n        this._caughtFish = [];\r\n        //return quickly\r\n        this.returnToSurface();\r\n    }\r\n\r\n    /**Called when hit by an enemy. */\r\n    public injure(enemy) {\r\n        //start hurt animation\r\n        //end any current tweening\r\n        createjs.Tween.removeTweens(this._sprite);\r\n        this._sprite.gotoAndPlay(Cat.ANIMATION.Ow);\r\n        this._catYTween = createjs.Tween.get(this._sprite)\r\n            .wait(30)\r\n            .to({y:20}, 1000, createjs.Ease.linear)\r\n            .call(() => {\r\n                //once the surface has been reached, allow x movement again\r\n                this.reachSurface();\r\n                this._sprite.gotoAndPlay(Cat.ANIMATION.Idle);\r\n            });\r\n    }\r\n\r\n    public reachSurface() {\r\n        //if we have a fish, send to main logic\r\n        if(this._caughtFish != null) {\r\n            this._caughtFish.forEach(f => {\r\n                this.GameScreen.collectFish(f);\r\n            });\r\n            this._caughtFish = [];\r\n        }\r\n\r\n        this._hasReachedSurface = true;\r\n    }\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    update(gameTime:number) {\r\n        super.update(gameTime);\r\n\r\n\r\n        //if we are rising, attempt to catch more fish\r\n        if(this._isRising) {\r\n            console.log(\"TRY TO GRAB\");\r\n            //try to grab a fish\r\n            const fishes = this.GameScreen.tryToGrabFishes(this.X , this.Y);\r\n            //see if a fish was grabbed\r\n            if(fishes.length > 0)\r\n                this.caught(fishes);\r\n        }\r\n\r\n        //drag fish with us if we have any\r\n        if(this._caughtFish != null) {\r\n            this._caughtFish.forEach(f => {\r\n                f.Y = this.Y - 20;\r\n            });\r\n        }\r\n    }\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public static get GRAB_RANGE() { return 120; }\r\n    public static get ANIMATION() {\r\n        return Object.freeze({\r\n            \"Idle\" : \"cat_idle\",\r\n            \"Death\" : \"cat_death\",\r\n            \"Grab\" : \"cat_grab\",\r\n            \"Hold\" : \"cat_grab_hold\",\r\n            \"Ow\" : \"cat_ow\"\r\n        });\r\n    }\r\n    public get Speed() { \r\n        const caughtFishMult = ((this._caughtFish.length > 0) ? 1 + (this._caughtFish.length + this._fishCaughtMultiplier) : 1);\r\n        console.log(caughtFishMult);\r\n\r\n        return caughtFishMult * this._speed;\r\n    }\r\n    public set Speed(value:number) { this._speed = value; }\r\n}","import { ICreateable, IUpdateable } from \"../Interfaces\";\r\nimport { GameScreen } from \"../screens/GameScreen\";\r\nimport { Game } from \"../Game\";\r\n\r\nexport class Entity implements ICreateable<Entity>, IUpdateable {\r\n    private _gameScreen:GameScreen;\r\n    protected _name:string;\r\n    protected _sprite:createjs.Sprite;\r\n    protected _direction:{ x:number, y:number };\r\n    private _scaling:number;\r\n\r\n    private _isIgnoringCollision:boolean;\r\n    private _ignoreCollisionTimer:number;\r\n\r\n    constructor(gameScreen:GameScreen, spritesheet:createjs.SpriteSheet) {\r\n        this._gameScreen = gameScreen;\r\n        this._sprite = new createjs.Sprite(spritesheet);\r\n        this._direction = { x:1, y:1 };\r\n\r\n        this._isIgnoringCollision = false;\r\n        this._ignoreCollisionTimer = 0;\r\n\r\n        //get the game scale\r\n        this._scaling = this._gameScreen.Game.Scaling;\r\n    }\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    public create(container:createjs.Container):Entity {\r\n        (this._sprite as any).scale = this._scaling;\r\n        //move to main container\r\n        if(container == null)\r\n            this._gameScreen.Game.Stage.addChild(this._sprite);\r\n        else\r\n            container.addChild(this._sprite);\r\n        return this;\r\n    }\r\n\r\n    public destroy():Entity {\r\n        if(this._sprite == null || this._sprite.parent == null) return null;\r\n\r\n        //remove from main container\r\n        this._sprite.parent.removeChild(this._sprite);\r\n\r\n        return this;\r\n    }\r\n\r\n    public update(gameTime:number) {\r\n\r\n         //listen for collision ignore\r\n        if(this._isIgnoringCollision) {\r\n            this._ignoreCollisionTimer++;\r\n\r\n            if(this._ignoreCollisionTimer > Entity.IGNORE_COLLISION)\r\n                this._isIgnoringCollision = false;\r\n        }\r\n    }\r\n\r\n    protected startIgnoreCollision() {\r\n        this._isIgnoringCollision = true\r\n    }\r\n\r\n    protected testStageBounds(artificialReg:{x:number, y:number} = null) {\r\n        let reg = { x:this._sprite.regX, y:this._sprite.regY };\r\n        if(artificialReg != null) {\r\n            reg = {\r\n                x: (this._direction.x > 0) ? this.Bounds.Width * artificialReg.x : (this.Bounds.Width * (1 - artificialReg.x)),\r\n                y: (this._direction.y > 0) ? this.Bounds.Height * artificialReg.y : (this.Bounds.Height * (1 - artificialReg.y))\r\n            }\r\n        }\r\n        // const bounds = { width:this._game.StageWidth, height: this._game.StageHeight };\r\n        const bounds = { width:this._gameScreen.Game.StageWidth, height: this._gameScreen.Game.StageHeight };\r\n        const extents = {   \r\n            x:(this._direction.x > 0) ? (this.Bounds.Width - reg.x) : -reg.x, \r\n            y:(this._direction.y > 0) ? (this.Bounds.Height - reg.y) : -reg.y \r\n        };\r\n\r\n        //test walls\r\n        if((this.X + extents.x) > bounds.width) return Entity.HIT.Right;\r\n        else if(this.X + extents.x < 0) return Entity.HIT.Left;\r\n    }\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public static get IGNORE_COLLISION() { return 20; }\r\n    public static get HIT() { return Object.freeze({Top:0, Right:1, Bottom:2, Left:3}); }\r\n\r\n    protected get GameScreen() { return this._gameScreen; }\r\n\r\n    public get Sprite() { return this._sprite; }\r\n    public get Parent() { return this._sprite.parent; }\r\n\r\n    public get X() { return this._sprite.x; }\r\n    public set X(value) { this._sprite.x = value; }\r\n    public get Y() { return this._sprite.y; }\r\n    public set Y(value) { this._sprite.y = value; }\r\n\r\n    public set DirectionX(value) { \r\n        const lastX = this._direction.x;\r\n        this._direction.x = value; \r\n        //flip sprite if our direction has changed\r\n        if(this._direction.x != lastX) this._sprite.scaleX *= -1;\r\n    }\r\n\r\n    public get Bounds() { \r\n        let bounds = this._sprite.getBounds();\r\n        return  { Width:bounds.width, Height:bounds.height };\r\n    }\r\n\r\n    public get IsIgnoringCollision() { return this._isIgnoringCollision; }\r\n}","import { Game } from \"../Game\";\r\nimport { Entity } from \"./Entity\";\r\nimport { LoadManager } from \"../managers/LoadManager\";\r\nimport { IEnableable } from \"../Interfaces\";\r\nimport { Logging } from \"../Functions\";\r\nimport { GameScreen } from \"../screens/GameScreen\";\r\n\r\nexport class Fish extends Entity implements IEnableable {\r\n    private _speed:number;\r\n    private _naturalY:number;\r\n\r\n    private _isCaught:boolean;\r\n\r\n    constructor(gameScreen:GameScreen) {\r\n        super(gameScreen, LoadManager.Spritesheets.Fish_Spritesheet);\r\n        this._speed = 1;\r\n\r\n        this._isCaught = false;\r\n\r\n        this._sprite.gotoAndPlay(Fish.ANIMATION.Slow);\r\n    }\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    \r\n\r\n\r\n    /***************/\r\n    /*   ACTIONS   */\r\n    /***************/\r\n    public setNaturalY() {\r\n        this._naturalY = this.Y;\r\n    }\r\n\r\n    public catch() {\r\n        if(this._isCaught) return;\r\n        \r\n        Logging.message(\"Fish was grabbed!\");\r\n        this._isCaught = true;\r\n\r\n        this._sprite.gotoAndPlay(Fish.ANIMATION.Panic);\r\n    }\r\n\r\n\r\n    /**Test to see if global position hits sprite. */\r\n    public testHit(x:number, y:number):boolean {\r\n        return this._sprite.hitTest(x, y);\r\n    }\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    destroy() {\r\n        this.disable();\r\n        return super.destroy();\r\n    }\r\n\r\n    update(gameTime:number) {\r\n        super.update(gameTime);\r\n\r\n        //move the fishy\r\n        if(!this._isCaught)\r\n            this.X += this._speed * gameTime * this._direction.x;\r\n\r\n        //test collision\r\n        if(!this.IsIgnoringCollision) {\r\n\r\n            //if fish hits the edge, flip direction\r\n            const hit = this.testStageBounds({x:0.5, y:0.5});\r\n            switch(hit) {\r\n                case Entity.HIT.Right:\r\n                    this._direction.x *= -1;\r\n                    this._sprite.scaleX *= -1;\r\n                    this.startIgnoreCollision();\r\n                    this.X -= 5 - this.Bounds.Width;\r\n                    break;\r\n                case Entity.HIT.Left:\r\n                    this._direction.x *= -1;\r\n                    this._sprite.scaleX *= -1;\r\n                    this.startIgnoreCollision();\r\n                    this.X += 5 - this.Bounds.Width;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    enable() {\r\n\r\n    }\r\n\r\n    disable() {\r\n\r\n    }\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public static get ANIMATION() {\r\n        return Object.freeze({\r\n            \"Slow\" : \"fish_swim_slow\",\r\n            \"Fast\" : \"fish_swim_fast\",\r\n            \"Panic\" : \"fish_swim_panic\"\r\n        });\r\n    }\r\n    public get Speed() { return this._speed; }\r\n    public set Speed(value:number) { this._speed = value; }\r\n}","import { Game } from \"./Game\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    const game = new Game(document.getElementById(\"game-canvas\") as HTMLCanvasElement);\r\n});","import { Screen } from \"../screens/Screen\";\r\n\r\nexport interface WorldsData {\r\n    worlds:LevelData[];\r\n}\r\n\r\nexport interface LevelData {\r\n    name:string;\r\n    data:any[];\r\n}\r\n\r\nexport class DataManager {\r\n    private static _worldsData:WorldsData;\r\n\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    /**Loads in the worlds data! */\r\n    public static loadWorldsData(fileLocation:string) {\r\n        return new Promise<WorldsData>(async(res, rej) => {\r\n            await fetch(fileLocation)\r\n                .then(blob => blob.json())\r\n                .then(json => {\r\n                    this._worldsData = json;\r\n                    res(this._worldsData);\r\n                })\r\n                .catch(err => {\r\n                    rej(\"Could not load world data! \" + err);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**Returns the level data received by the given index. */\r\n    public static getLevelDataByIndex(index:number) {\r\n        //flatten level data, and get data\r\n        let flatten = [].concat.apply([], DataManager._worldsData.worlds);\r\n        return flatten[index];\r\n    }\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public static get WorldsData():WorldsData { return DataManager._worldsData; }\r\n}","export class LoadManager {\r\n    public static get ASSETS_LOADED():string { return \"onAssetsLoaded\"; }\r\n    public static get ASSETS_FAILED():string { return \"onAssetsFailed\"; }\r\n    public static get ASSETS_UPDATED():string { return \"onAssetsUpdated\"; }\r\n\r\n    public static Spritesheets:{ [key:string]:createjs.SpriteSheet } = {};\r\n    public static Images:{ [key:string]:createjs.Bitmap } = {};\r\n\r\n    private static _stage:createjs.StageGL;\r\n    private static _preloadManager:createjs.LoadQueue;\r\n    private static _sheetsTotal:number = 0;\r\n    private static _sheetsLoaded:number = 0;\r\n\r\n    private static _percentage:number = 0;\r\n    private static _totalAssetsLoaded:number = 0;\r\n    private static _totalAssets:number = 0;\r\n\r\n    private static AssetsLoadedEvent:any = new (createjs as any).Event(LoadManager.ASSETS_LOADED, false, true);\r\n    private static AssetsFailedEvent:any = new (createjs as any).Event(LoadManager.ASSETS_FAILED, false, true);\r\n    private static AssetsUpdatedEvent:any = new (createjs as any).Event(LoadManager.ASSETS_UPDATED, false, true);\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    public static reset() {\r\n        LoadManager._sheetsTotal = 0;\r\n        LoadManager._sheetsLoaded = 0;\r\n\r\n        LoadManager._percentage = 0;\r\n        LoadManager._totalAssetsLoaded = 0;\r\n        LoadManager._totalAssets = 0;\r\n    }\r\n\r\n    public static loadAssets(src:string, stage:createjs.StageGL) {\r\n        LoadManager.reset();\r\n        LoadManager._stage = stage;\r\n\r\n        return new Promise(async(res, rej) => {\r\n            LoadManager._preloadManager = new createjs.LoadQueue();\r\n\r\n            //setup sound controllers\r\n            createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashAudioPlugin]);\r\n            createjs.Sound.alternateExtensions = [\"mp3\",\"wav\"];\r\n            LoadManager._preloadManager.installPlugin(createjs.Sound);\r\n\r\n            //setup listeners\r\n            (LoadManager._preloadManager as any).on(\"fileload\", LoadManager._onLoaded, LoadManager);\r\n            (LoadManager._preloadManager as any).on(\"complete\", LoadManager._onComplete, LoadManager);\r\n            (LoadManager._preloadManager as any).on(\"error\", LoadManager._onError, LoadManager);\r\n\r\n            //get the manifest\r\n            fetch(src)\r\n                .then(blob => blob.json())\r\n                .then(data => {\r\n                    //load the manifest\r\n                    LoadManager._preloadManager.setMaxConnections(1);\r\n                    LoadManager._preloadManager.loadManifest(data);\r\n\r\n                    (LoadManager._stage as any).addEventListener(LoadManager.ASSETS_LOADED, () => {\r\n                        res();\r\n                    });\r\n                })\r\n                .catch(() => {\r\n                    LoadManager.emitErrorEvent();\r\n                    rej(\"Could not load assets!\");\r\n                });\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    public static emitLoadedEvent() {\r\n        if(LoadManager._stage != null) (LoadManager._stage as any).dispatchEvent(LoadManager.AssetsLoadedEvent);\r\n    }\r\n    public static emitErrorEvent() {\r\n        if(LoadManager._stage != null) (LoadManager._stage as any).dispatchEvent(LoadManager.AssetsFailedEvent);\r\n    }\r\n    public static emitUpdatedEvent() {\r\n        LoadManager._percentage = parseFloat((LoadManager._preloadManager.getItems(true).length / LoadManager._preloadManager.getItems(false).length).toFixed(2));\r\n        if(LoadManager._stage != null) (LoadManager._stage as any).dispatchEvent(LoadManager.AssetsUpdatedEvent);\r\n    }\r\n\r\n\r\n    private static _loadedSheet(name:string, sheet:createjs.SpriteSheet) {\r\n        LoadManager.Spritesheets[name] = sheet;\r\n\r\n        LoadManager._sheetsLoaded++;\r\n    }\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    private static _onLoaded(e) {\r\n\r\n        console.log(\"asset loaded: \" + e.item.src + \" type: \" + e.item.type);\r\n\r\n        switch(e.item.type) {\r\n            case (createjs as any).Types.JAVASCRIPT: {\r\n                //load the spritesheet\r\n                LoadManager._sheetsTotal++;\r\n                \r\n                const sheet = (window[e.item.id] as any)._SpriteSheet;\r\n\r\n                // listen for spritesheet to load\r\n                if(!sheet.complete) {\r\n                    sheet.on(\"complete\", (ev:any) => {\r\n                        LoadManager._loadedSheet(e.item.id, sheet);\r\n                        ev.remove();\r\n                    })\r\n                }\r\n                else LoadManager._loadedSheet(e.item.id, sheet);\r\n                break\r\n            }\r\n            case (createjs as any).Types.IMAGE: {\r\n                //build the bitmap\r\n                LoadManager.Images[e.item.id] = new createjs.Bitmap(e.item.src);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        //update event\r\n        LoadManager.emitUpdatedEvent();\r\n    }\r\n\r\n    private static _onComplete(e) {\r\n        //remove all preLoadManager events\r\n        (LoadManager._preloadManager as any).removeAllEventListeners();\r\n        \r\n        //make sure all spritesheets are loaded\r\n        if(LoadManager._sheetsLoaded < LoadManager._sheetsTotal) {\r\n            const loadInterval = setInterval((ev:any) => {\r\n                //see if they are loaded\r\n                if(LoadManager._sheetsLoaded >= LoadManager._sheetsTotal) {\r\n                    e.remove();\r\n                    // window.clearInterval(loadInterval);\r\n                    LoadManager.emitLoadedEvent();\r\n                }\r\n            }, 100)\r\n        }\r\n        else LoadManager.emitLoadedEvent();\r\n    }\r\n\r\n    private static _onError(e) {\r\n        LoadManager.emitErrorEvent();\r\n    }\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public static get Percentage():number { return LoadManager._percentage; }\r\n    \r\n\r\n\r\n\r\n}","import { Screen } from \"../screens/Screen\";\r\n\r\nexport class ScreenManager {\r\n    private static _screensLookup:{ [key:string]:Screen } = { };\r\n    private static _currentScreen:Screen = null;\r\n\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    /**Registers a screen into the Screen Manager.  Uses a key to associate it. */\r\n    public static registerScreen(key:string, screen:Screen):void {\r\n        //if we don't have this screen, add it\r\n        if(ScreenManager._screensLookup[key] == null)\r\n            ScreenManager._screensLookup[key] = screen;\r\n    }\r\n\r\n    /**Unregisters a screen from the Screen Manager. */\r\n    public static unregisterScreen(key:string):boolean {\r\n        if(ScreenManager._screensLookup[key] == null) return false;\r\n\r\n        ScreenManager._screensLookup[key] = null;\r\n        delete ScreenManager._screensLookup[key];\r\n        return true;\r\n    }\r\n\r\n    /**Sets the current screen.  Can be done with the screen itself or an associative key. */\r\n    public static setCurrentScreen(screen:string | Screen, stage:createjs.StageGL):Promise<void> {\r\n        let tempScreen = null;\r\n        if(screen instanceof Screen) tempScreen = screen;\r\n        else tempScreen = ScreenManager._screensLookup[screen];\r\n\r\n        //if we did not find a screen, do not follow through\r\n        if(tempScreen == null) return Promise.resolve();\r\n\r\n        let promises = [];\r\n        //if we have a previous screen, wait for it to fade out\r\n        if(ScreenManager._currentScreen != null)\r\n        promises.push(\r\n            new Promise(async(res) => {\r\n                //fade out\r\n                createjs.Tween\r\n                    .get(ScreenManager._currentScreen.Container)\r\n                    .to({ alpha:0 }, 500, createjs.Ease.linear)\r\n                    .call(() => {\r\n                        ScreenManager._currentScreen.destroy();\r\n                        res();\r\n                    });\r\n            })\r\n        );\r\n\r\n\r\n        //wait for certain actions to finish\r\n        return new Promise(async(res) => {\r\n            //wait for promises to finish\r\n            await Promise.all(promises);\r\n\r\n            //now add in the new one\r\n            ScreenManager._currentScreen = tempScreen;\r\n            ScreenManager._currentScreen.create(stage);\r\n            ScreenManager._currentScreen.Container.alpha = 0;\r\n            ScreenManager._currentScreen.disable(); //disable until ready\r\n            console.log(\"FADE IN\")\r\n            //fade in\r\n            createjs.Tween\r\n                .get(ScreenManager._currentScreen.Container)\r\n                .to({ alpha:1 }, 1200, createjs.Ease.linear)\r\n                .call(() => {\r\n                    console.log(\"DONE\");\r\n                    ScreenManager._currentScreen.enable();\r\n                    res();\r\n                });\r\n\r\n        });\r\n    }\r\n\r\n    public static getScreenByKey(key:string):Screen {\r\n        return ScreenManager._screensLookup[key];\r\n    }\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public static get AllScreens() { return ScreenManager._screensLookup; }\r\n    public static get CurrentScreen() { return ScreenManager._currentScreen; }\r\n}","import { Screen } from \"./Screen\";\r\nimport { ScreenManager } from \"../managers/ScreenManager\";\r\n\r\nexport class EndScreen extends Screen {\r\n    private _splash:createjs.Shape;\r\n    \r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    create(stage:createjs.StageGL):Screen {\r\n        //add stuff\r\n        this._splash = new createjs.Shape();\r\n        this._splash.graphics.beginFill(\"pink\");\r\n        this._splash.graphics.drawRect(0, 0, 200, 100);\r\n        this._splash.graphics.endFill();\r\n        this._splash.cache(0, 0, 200, 100);\r\n        this._container.addChild(this._splash);\r\n        super.create(stage);\r\n\r\n         //for testing\r\n        (this._container as any).on(\"click\", (e) => {\r\n            ScreenManager.setCurrentScreen(\"end\", stage);\r\n        }, this, true);\r\n\r\n        return null;\r\n    }\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n}","import { Screen } from \"./Screen\";\r\nimport { ScreenManager } from \"../managers/ScreenManager\";\r\nimport { ObjectPool } from \"../ObjectPool\";\r\nimport { Fish } from \"../entities/Fish\";\r\nimport { Cat } from \"../entities/Cat\";\r\nimport { Game } from \"../Game\";\r\nimport { Container } from \"../ui/display/Container\";\r\nimport { Sprites } from \"../ui/Sprites\";\r\nimport { Logging } from \"../Functions\";\r\nimport { LevelData } from \"../managers/DataManager\";\r\nimport { LoadManager } from \"../managers/LoadManager\";\r\n\r\nexport class GameScreen extends Screen {\r\n    private _game:Game;\r\n    private _levelData:LevelData;\r\n\r\n    //create containers\r\n    private _staticContainer:Container;\r\n    private _fishContainer:createjs.Container;\r\n\r\n    private _winContainer:createjs.Container;\r\n    private _winBanner:createjs.Shape;\r\n    private _winText:createjs.BitmapText;\r\n\r\n    private _cat:Cat;\r\n    private _fishes:Fish[];\r\n    \r\n    private _remainingFish:number;\r\n    \r\n    constructor(game:Game) {\r\n        super();\r\n        this._game = game;\r\n        this._fishes = [];\r\n        this._remainingFish = -1;\r\n        this._levelData = null;\r\n\r\n        //create object pool\r\n        ObjectPool.createPoolObject(new Cat(this), POOL.CAT)\r\n        for(let i = 0; i < 120; i++) {\r\n            ObjectPool.createPoolObject(new Fish(this), POOL.FISH);\r\n        }\r\n        // for(let i = 0; i < 30; i++) {\r\n        //     ObjectPool.createPoolObject(new Puffer(this._game), POOL.PUFFERFISH)\r\n        // }\r\n\r\n\r\n        //pool out static kitty\r\n        this._cat = (ObjectPool.checkout(POOL.CAT) as Cat);\r\n\r\n        //create containers\r\n        this._staticContainer = new Container();\r\n        this._staticContainer.addMany({\r\n            bg : Sprites.Backgrounds.BG\r\n        });\r\n\r\n        this._fishContainer = new createjs.Container();\r\n\r\n        this._winContainer = new createjs.Container();\r\n    }\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n\r\n    /**Attempts to grab a fish.  Returns any fish that are touching the global position. */\r\n    public tryToGrabFishes(x:number, y:number):Fish[] {\r\n        let fishes = [];\r\n\r\n        //see if any fish is grabbable at these coords and return if so\r\n        //for each fish, test the distance and return if close\r\n        for(let i = 0; i < this._fishes.length; i++) {\r\n            const fish = this._fishes[i];\r\n\r\n            const localPos = fish.Sprite.globalToLocal(x, y);\r\n            const hitFish = fish.testHit(localPos.x, localPos.y);\r\n\r\n            if(hitFish) {\r\n                fishes.push(fish);\r\n            }\r\n        }\r\n        //if no fish was caught, return null\r\n        return fishes;\r\n    }\r\n\r\n    public collectFish(fish:Fish) {\r\n        //get fish\r\n        Logging.success(\"GOT FISH!\");\r\n\r\n        const killedFish = fish.destroy();\r\n\r\n        //decrement fish counter -- make sure we didn't make an error\r\n        if(killedFish != null) {\r\n            this._remainingFish--;\r\n\r\n            //if all our fish are gone, end the game!\r\n            if(this._remainingFish <= 0) {\r\n                //win game!\r\n                Logging.success(\"GAME IS OVER!\");\r\n                this.win();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public win() {\r\n        this.disable();\r\n        //show win banner\r\n        createjs.Tween.get(this._winContainer)\r\n            .to({y:this._game.StageHeight / 2 - 25}, 600, createjs.Ease.elasticOut)\r\n            .wait(2000)\r\n            .call(() => {\r\n                //transition to end screen\r\n                ScreenManager.setCurrentScreen(\"end\", this._game.Stage);\r\n                // ScreenManager.setCurrentScreen(\"menu\", this._game.Stage);\r\n            });\r\n    }\r\n\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    public create(stage:createjs.StageGL):Screen {\r\n        super.create(stage);\r\n        //add stuff\r\n        this._staticContainer.checkoutSprites();\r\n        this._staticContainer.Sprites.bg.y = 0;\r\n        this._container.addChild(this._staticContainer.Container);\r\n\r\n        this._container.addChild(this._fishContainer);\r\n\r\n        //add conditional text\r\n        this._winBanner = new createjs.Shape();\r\n        this._winBanner.graphics.beginFill(\"black\");\r\n        this._winBanner.graphics.drawRect(0, 0, this._game.StageWidth, 50);\r\n        this._winBanner.cache(0, 0, this._game.StageWidth, 50);\r\n        this._winContainer.addChild(this._winBanner);\r\n        this._winText = Sprites.generateBitmapText(\"Win!\", LoadManager.Spritesheets.TypographyWhite);\r\n        this._winContainer.addChild(this._winText);\r\n        this._winText.x = (this._game.StageWidth / 2) - (this._winText.getBounds().width / 2);\r\n\r\n        this._container.addChild(this._winContainer);\r\n        this._winContainer. y = this._game.StageHeight + 50;\r\n        this._winContainer.mouseEnabled = false;\r\n\r\n        \r\n        this._cat.create(this._container);\r\n\r\n\r\n        //add level data if it exists\r\n        if(this._levelData != null) {\r\n            //load in critters\r\n            for(let i = 0; i < this._levelData.data.length; i++) {\r\n                const data = this._levelData.data[i];\r\n                switch(data.id) {\r\n                    case POOL.FISH:\r\n                        const fish = (ObjectPool.checkout(POOL.FISH) as Fish);\r\n                        fish.create(this._fishContainer);\r\n                        if(data.speed != null) fish.Speed = data.speed; //set variables\r\n                        if(data.x != null) fish.X = data.x;\r\n                        if(data.y != null) fish.Y = data.y;\r\n                        if(data.flip != null && data.flip) fish.DirectionX = -1;\r\n                        fish.setNaturalY();\r\n                        this._fishes.push(fish);\r\n                        break;\r\n                }      \r\n            }\r\n\r\n            //set fish total\r\n            this._remainingFish = this._fishes.length;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public destroy() {\r\n        this._cat.destroy();\r\n        this._fishes.forEach(f => f.destroy());\r\n        this._fishContainer.removeAllChildren();\r\n\r\n        this._fishes = [];\r\n\r\n        return super.destroy();\r\n    }\r\n\r\n    public update(gameTime:number) {\r\n        const normalizedTime = Math.min(1, gameTime) + 0.5;\r\n\r\n        //update entities\r\n        this._fishes.forEach(fish => {\r\n            fish.update(normalizedTime);\r\n        });\r\n\r\n        this._cat.update(normalizedTime);\r\n\r\n        super.update(gameTime);\r\n    }\r\n\r\n    public enable() {\r\n        (this._container as any).on(\"click\", this._cat.grab, this._cat);\r\n    }\r\n\r\n    public disable() {\r\n        (this._container as any).removeAllEventListeners();\r\n    }\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public get Game() { return this._game; }\r\n\r\n    public set LevelData(data:LevelData) { this._levelData = data; }\r\n}\r\n\r\n\r\n\r\nexport class POOL { \r\n    static get CAT() { return \"cat\"; }\r\n    static get FISH() { return \"fish\"; }\r\n    static get PUFFERFISH() { return \"puffer\"; }\r\n}","import { Screen } from \"./Screen\";\r\nimport { ScreenManager } from \"../managers/ScreenManager\";\r\nimport { Sprites } from \"../ui/Sprites\";\r\nimport { Game } from \"../Game\";\r\nimport { LoadManager } from \"../managers/LoadManager\";\r\n\r\nexport class IntermediaryScreen extends Screen {\r\n    private _game:Game;\r\n    private _bg:createjs.Shape;\r\n    private _textContainer:createjs.Container;\r\n\r\n    private _text:string;\r\n    \r\n    constructor(game:Game) {\r\n        super();\r\n        this._game = game;\r\n\r\n        this._text = \"\";\r\n    }\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    /**Chooses the screen to load in after the intermediary. */\r\n    public queueNextScreen(screenKey:string, duration:number=3000) {\r\n        const evt = window.setTimeout(() => {\r\n            //load the screen\r\n            ScreenManager.setCurrentScreen(screenKey, this._game.Stage);\r\n            //clear the timeout\r\n            window.clearTimeout(evt);\r\n        }, duration);\r\n    }\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    public create(stage:createjs.StageGL):Screen {\r\n        //add stuff\r\n        this._bg = new createjs.Shape();\r\n        this._bg.graphics.beginFill(\"#191919\");\r\n        this._bg.graphics.drawRect(0, 0, this._game.StageWidth, this._game.StageHeight);\r\n        this._bg.graphics.endFill();\r\n        this._bg.cache(0, 0, this._game.StageWidth, this._game.StageHeight);\r\n        this._container.addChild(this._bg);\r\n\r\n        this._textContainer = new createjs.Container();\r\n        this._container.addChild(this._textContainer);\r\n\r\n        super.create(stage);\r\n\r\n        //for testing\r\n        (this._container as any).on(\"click\", (e) => {\r\n            ScreenManager.setCurrentScreen(\"menu\", stage);\r\n        }, this, true);\r\n\r\n        if(this._text != \"\") {\r\n            //create the text\r\n            const text = Sprites.generateBitmapText(this._text, LoadManager.Spritesheets.TypographyWhite);\r\n            (text as any).scale = 0.6;\r\n            // const text = createjs.Sprites.generateText(value);\r\n            //load into container\r\n            this._textContainer.removeAllChildren();\r\n            this._textContainer.addChild(text);\r\n    \r\n            //put container at bottom\r\n            this._textContainer.x = (this._game.StageWidth / 2) - ((text.getBounds().width / 2) * 0.6);\r\n            this._textContainer.y = (this._game.StageHeight / 2) - (text.getBounds().height / 2);\r\n        }\r\n        else {\r\n            this._textContainer.removeAllChildren();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public set Text(value:string) {\r\n        this._text = value;\r\n    }\r\n}","import { Screen } from \"./Screen\";\r\nimport { ScreenManager } from \"../managers/ScreenManager\";\r\nimport { Sprites } from \"../ui/Sprites\";\r\nimport { Layout } from \"../ui/display/Layout\";\r\nimport { LoadManager } from \"../managers/LoadManager\";\r\nimport { Container } from \"../ui/display/Container\";\r\nimport { Logging } from \"../Functions\";\r\nimport { Game } from \"../Game\";\r\nimport { LevelSelectDisplay } from \"../ui/custom/LevelSelectDisplay\";\r\nimport { IntermediaryScreen } from \"./IntermediaryScreen\";\r\nimport { GameScreen } from \"./GameScreen\";\r\nimport { DataManager } from \"../managers/DataManager\";\r\n\r\nexport class MenuScreen extends Screen {\r\n    private _game:Game;\r\n    //containers\r\n    private _swipeContainer:createjs.Container;\r\n    private _staticContainer:Container;\r\n    private _mainContainer:Container;\r\n    private _clearedContainer:Container;\r\n    private _optionsContainer:Container;\r\n    private _levelSelectContainer:Container;\r\n\r\n    //custom containers\r\n    private _levelSelectDisplay:LevelSelectDisplay;\r\n\r\n    //properties\r\n    private _swipeSpeed:number;\r\n    private _currentScreen:string;\r\n    private _initialSwipePos:{x:number, y:number};\r\n    private _dragTimer:any;\r\n\r\n    \r\n    constructor(game:Game) {\r\n        super();\r\n\r\n        this._game = game;\r\n\r\n        //setup swipe container -- holds all moving sprites\r\n        this._swipeContainer = new createjs.Container();\r\n\r\n        //setup static container\r\n        this._staticContainer = new Container();\r\n        this._staticContainer.addMany({\r\n            bg : Sprites.Backgrounds.BG\r\n        });\r\n\r\n        //setup main container\r\n        this._mainContainer = new Container();\r\n        this._mainContainer.addMany({\r\n            logo : Sprites.Backgrounds.Logo,\r\n            fishbowl : Sprites.Buttons.Fishbowl,\r\n            btnNewGame : Sprites.Buttons.NewGame,\r\n            btnOptions : Sprites.Buttons.Options,\r\n            btnLevelSelect : Sprites.Buttons.LevelSelect,\r\n            btnExit : Sprites.Buttons.Exit\r\n        });\r\n\r\n        //setup options container\r\n        this._optionsContainer = new Container();\r\n        this._optionsContainer.addMany({\r\n            txtOptions : Sprites.generateBitmapText(\"Options\", LoadManager.Spritesheets.Typography),\r\n            btnClearData : Sprites.Buttons.ClearData\r\n        });\r\n        this._optionsContainer.Container.x -= this._game.StageWidth;\r\n\r\n        //setup cleared container\r\n        this._clearedContainer = new Container();\r\n        this._clearedContainer.add(\"txtCleared\", Sprites.generateBitmapText(\"Data successfully cleared!\", LoadManager.Spritesheets.Typography));\r\n        this._clearedContainer.Container.x -= this._game.StageWidth;\r\n        this._clearedContainer.Container.y -= this._game.StageHeight;\r\n\r\n        //setup level select container\r\n        // this._levelSelectContainer = new Container();\r\n        // this._levelSelectContainer.addMany({\r\n        //     txtOptions : Sprites.generateBitmapText(\"Level Select\", LoadManager.Spritesheets.Typography),\r\n        //     // staticBG : Sprites.Backgrounds.LevelSelectBG,\r\n        //     // // levels : this._levelSelectLevelsContainer.Container\r\n        //     // level1 : Sprites.cloneSprite(Sprites.Buttons.LevelEmpty as Sprite),\r\n        //     // level2 : Sprites.cloneSprite(Sprites.Buttons.LevelEmpty as Sprite)\r\n        // });\r\n        // this._levelSelectDisplay = new LevelSelectDisplay();\r\n        // this._levelSelectContainer.add(\"levelSelect\", this._levelSelectDisplay.Container);\r\n        // this._levelSelectContainer.Container.x += this._game.StageWidth;\r\n\r\n        this._levelSelectDisplay = new LevelSelectDisplay(game);\r\n        this._levelSelectDisplay.Container.x += this._game.StageWidth;\r\n\r\n\r\n        //setup properties\r\n        this._swipeSpeed = 800;\r\n        this._currentScreen = \"main\";\r\n        this._initialSwipePos = { x:-1, y:-1 };\r\n\r\n    }\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    private _onNewGame() {\r\n        Logging.message(\"Go to new game!\");\r\n        \r\n        const data = DataManager.getLevelDataByIndex(0);\r\n        (ScreenManager.getScreenByKey(\"game\") as GameScreen).LevelData = data;\r\n        \r\n        const intermediary = ScreenManager.getScreenByKey(\"intermediary\") as IntermediaryScreen;\r\n        new Promise(async(res) => {\r\n            intermediary.Text = data.name;\r\n            await ScreenManager.setCurrentScreen(intermediary, this.Stage);\r\n            intermediary.queueNextScreen(\"game\");\r\n\r\n            res();\r\n        });\r\n    }\r\n    private _onOptions() {\r\n        //go to options!\r\n        Logging.message(\"Go to options!\");\r\n        createjs.Tween.get(this._swipeContainer).to({x:this._game.StageWidth}, this._swipeSpeed, createjs.Ease.circOut);\r\n        this._currentScreen = \"options\";\r\n    }\r\n    private _onLevelSelect() {\r\n        Logging.message(\"Go to level select!\");\r\n        createjs.Tween.get(this._swipeContainer).to({x:-this._game.StageWidth}, this._swipeSpeed, createjs.Ease.circOut);\r\n        this._currentScreen = \"levelSelect\";\r\n    }\r\n    private _onExit() {\r\n        Logging.message(\"Go to exit!\");\r\n    }\r\n\r\n    private _onMain() {\r\n        Logging.message(\"Go to main!\");\r\n        createjs.Tween.get(this._swipeContainer).to({x:0}, this._swipeSpeed, createjs.Ease.bounceOut);\r\n        this._currentScreen = \"main\";\r\n    }\r\n\r\n    private _onClearData() {\r\n        Logging.success(\"Cleared data!\");\r\n        createjs.Tween.get(this._swipeContainer).to({x:this._game.StageWidth, y:this._game.StageHeight}, this._swipeSpeed, createjs.Ease.cubicIn);\r\n        // this._currentScreen = \"cleared\"\r\n        let e = window.setTimeout(() => {\r\n            createjs.Tween.get(this._swipeContainer).to({x:this._game.StageWidth, y:0}, this._swipeSpeed, createjs.Ease.cubicInOut);\r\n            window.clearInterval(e);\r\n            this._currentScreen = \"options\";\r\n        }, 2000);\r\n    }\r\n\r\n    private _onDragStart(e) {\r\n\r\n        this._initialSwipePos = { x:e.stageX, y:e.stageY };\r\n\r\n        //reset drag timer if not null\r\n        if(this._dragTimer != null) window.clearTimeout(this._dragTimer);\r\n        this._dragTimer = setTimeout(() => {\r\n            this._initialSwipePos = { x:-1, y:-1 };\r\n            this._dragTimer = null;\r\n        }, 500);\r\n    }\r\n    private _onDragEnd(e) {\r\n        if(this._initialSwipePos.x != -1 || this._initialSwipePos.y != -1) {\r\n            //find the direction\r\n            if((this._initialSwipePos.x - e.stageX) > 20) {\r\n                if(this._currentScreen == \"options\")\r\n                    this._onMain();\r\n            }\r\n            else if((this._initialSwipePos.x - e.stageX) < -20) {\r\n                if(this._currentScreen == \"levelSelect\")\r\n                    this._onMain();\r\n            }\r\n        }\r\n    }\r\n\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    public create(stage:createjs.StageGL):Screen {\r\n\r\n        //add in the containers\r\n        this._staticContainer.checkoutSprites();\r\n        this._staticContainer.Sprites.bg.y = 0;\r\n        this._container.addChild(this._staticContainer.Container);\r\n        this._container.addChild(this._swipeContainer);\r\n        this._swipeContainer.addChild(this._mainContainer.Container);\r\n        this._swipeContainer.addChild(this._optionsContainer.Container);\r\n        this._swipeContainer.addChild(this._clearedContainer.Container);\r\n        // this._swipeContainer.addChild(this._levelSelectContainer.Container);\r\n        \r\n        this._swipeContainer.addChild(this._levelSelectDisplay.Container);\r\n\r\n        super.create(stage);\r\n\r\n        return null;\r\n    }\r\n\r\n    public enable() {\r\n        super.enable();\r\n        //listen to events\r\n        (this._mainContainer.Sprites.btnNewGame as any).on(\"click\", this._onNewGame, this, true);\r\n        (this._mainContainer.Sprites.btnOptions as any).on(\"click\", this._onOptions, this);\r\n        (this._mainContainer.Sprites.btnLevelSelect as any).on(\"click\", this._onLevelSelect, this);\r\n        (this._mainContainer.Sprites.btnExit as any).on(\"click\", this._onExit, this);\r\n\r\n        Sprites.listenToClearData();\r\n        (this._optionsContainer.Sprites.btnClearData as any).on(Sprites.CLEAR_DATA, this._onClearData, this);\r\n\r\n        //listen for swipes\r\n        (this._staticContainer.Sprites.bg as any).on(\"mousedown\", this._onDragStart, this);\r\n        (this._staticContainer.Sprites.bg as any).on(\"click\", this._onDragEnd, this);\r\n\r\n        // this._mainContainer.Sprites.btnOptions.on(\"click\", () => console.log(\"HELLO I CLIC\"));\r\n\r\n        this._levelSelectDisplay.enable();\r\n    }\r\n\r\n    public disable() {\r\n        super.disable();\r\n        //stop listen to events\r\n        (this._mainContainer.Sprites.btnNewGame as any).off(\"click\", this._onNewGame);\r\n        (this._mainContainer.Sprites.btnOptions as any).off(\"click\", this._onOptions);\r\n        (this._mainContainer.Sprites.btnLevelSelect as any).off(\"click\", this._onLevelSelect);\r\n        (this._mainContainer.Sprites.btnExit as any).off(\"click\", this._onExit);\r\n\r\n        Sprites.stopListenToClearData();\r\n        (this._optionsContainer.Sprites.btnClearData as any).off(Sprites.CLEAR_DATA, this._onClearData);\r\n\r\n        //stop listen for swipes\r\n        (this._staticContainer.Sprites.bg as any).off(\"mousedown\", this._onDragStart);\r\n        (this._staticContainer.Sprites.bg as any).off(\"click\", this._onDragEnd);\r\n\r\n\r\n        this._levelSelectDisplay.disable();\r\n    }\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n}","import { IUpdateable, ICreateable, IEnableable } from \"../Interfaces\";\r\n\r\nexport class Screen implements ICreateable<Screen>, IUpdateable, IEnableable {\r\n    private _stage:createjs.StageGL;\r\n    protected _container:createjs.Container;\r\n\r\n    constructor() {\r\n        this._container = new createjs.Container();\r\n    }\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    /**Updates the screen. */\r\n    public update(gameTime:number) {\r\n\r\n    }\r\n\r\n    /**Creates the screen and adds to the stage. */\r\n    public create(stage:createjs.StageGL):Screen {\r\n        this._stage = stage;\r\n        //add to the stage\r\n        this._stage.addChild(this._container);\r\n\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**Destroys the screen and removes from the stage. */\r\n    public destroy():Screen {\r\n\r\n        //remove from the stage\r\n        this._stage.removeChild(this._container);\r\n\r\n        return this;\r\n    }\r\n\r\n    public enable() {\r\n\r\n    }\r\n\r\n    public disable() {\r\n        \r\n    }\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public get Container():createjs.Container { return this._container; }\r\n    protected get Stage():createjs.StageGL { return this._stage; }\r\n\r\n}","import { Screen } from \"./Screen\";\r\nimport { ScreenManager } from \"../managers/ScreenManager\";\r\n\r\nexport class SplashScreen extends Screen {\r\n    private _splash:createjs.Shape;\r\n    \r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    public create(stage:createjs.StageGL):Screen {\r\n        //add stuff\r\n        this._splash = new createjs.Shape();\r\n        this._splash.graphics.beginFill(\"red\");\r\n        this._splash.graphics.drawRect(0, 0, 100, 100);\r\n        this._splash.graphics.endFill();\r\n        this._splash.cache(0, 0, 100, 100);\r\n        this._container.addChild(this._splash);\r\n        super.create(stage);\r\n\r\n        //for testing\r\n        (this._container as any).on(\"click\", (e) => {\r\n            ScreenManager.setCurrentScreen(\"menu\", stage);\r\n        }, this, true);\r\n\r\n        return this;\r\n    }\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n}","import { LoadManager } from \"../managers/LoadManager\";\r\n\r\n/**Used to gain access to in-game sprites. */\r\nexport class Sprites {\r\n    public static CLEAR_DATA:string = \"onClearData\";\r\n\r\n    private static _backgrounds:{ [key:string]:createjs.DisplayObject } = { };\r\n    private static _buttons:{ [key:string]:createjs.DisplayObject } = { };\r\n\r\n    private static _spritesheets:createjs.SpriteSheet[];\r\n\r\n    private static _canClearData:boolean = false;\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    public static setup() {\r\n        return new Promise((res, rej) => {\r\n            // Sprites.spritesheets = spritesheets\r\n            //setup all the sprites\r\n            /* ------- STATIC ------- */\r\n            Sprites._backgrounds.Main = new createjs.Sprite(LoadManager.Spritesheets.UI); // Static BG\r\n            (Sprites._backgrounds.Main as createjs.Sprite).gotoAndStop(\"bg_main_static\");\r\n\r\n            Sprites._backgrounds.Logo = new createjs.Sprite(LoadManager.Spritesheets.Entities); // LOGO\r\n            (Sprites._backgrounds.Logo as createjs.Sprite).gotoAndStop(\"icon_title\");\r\n\r\n            Sprites._backgrounds.BG = LoadManager.Images.BG; // Redux\r\n            Sprites._backgrounds.BGTop = LoadManager.Images.BGTop;\r\n\r\n\r\n            /* ------- ANIMATED ------- */\r\n            Sprites._backgrounds.Wave = new createjs.Sprite(LoadManager.Spritesheets.UI); // Animated BG\r\n            (Sprites._backgrounds.Wave as createjs.Sprite).gotoAndPlay(\"bg_main\");\r\n            \r\n            /* ------- BUTTONS ------- */\r\n            Sprites._buttons.NewGame = new createjs.Sprite(LoadManager.Spritesheets.Entities); // New Game\r\n            (Sprites._buttons.NewGame as createjs.Sprite).gotoAndStop(\"btn_new_game\");\r\n            new createjs.ButtonHelper(Sprites._buttons.NewGame as createjs.Sprite, \"btn_new_game\", \"btn_new_game_hover\", \"btn_new_game_hover\");\r\n\r\n\r\n            Sprites._buttons.Options = new createjs.Sprite(LoadManager.Spritesheets.Entities); // Options\r\n            (Sprites._buttons.Options as createjs.Sprite).gotoAndStop(\"btn_new_game\");\r\n            new createjs.ButtonHelper(Sprites._buttons.Options as createjs.Sprite, \"btn_options\", \"btn_options_hover\", \"btn_options_hover\");\r\n\r\n            Sprites._buttons.LevelSelect = new createjs.Sprite(LoadManager.Spritesheets.Entities); // Select\r\n            (Sprites._buttons.LevelSelect as createjs.Sprite).gotoAndStop(\"btn_select\");\r\n            new createjs.ButtonHelper(Sprites._buttons.LevelSelect as createjs.Sprite, \"btn_select\", \"btn_select_hover\", \"btn_select_hover\");\r\n\r\n            Sprites._buttons.Exit = new createjs.Sprite(LoadManager.Spritesheets.Entities); // Exit\r\n            (Sprites._buttons.Exit as createjs.Sprite).gotoAndStop(\"btn_select\");\r\n            new createjs.ButtonHelper(Sprites._buttons.Exit as createjs.Sprite, \"btn_exit\", \"btn_exit_hover\", \"btn_exit_hover\");\r\n\r\n            Sprites._buttons.Fishbowl = new createjs.Sprite(LoadManager.Spritesheets.Entities); // Fishbowl\r\n            (Sprites._buttons.Fishbowl as createjs.Sprite).gotoAndStop(\"btn_select\");\r\n            new createjs.ButtonHelper(Sprites._buttons.Fishbowl as createjs.Sprite, \"icon_fishbowl\", \"icon_fishbowl_hover\", \"icon_fishbowl_hover\", true);\r\n\r\n\r\n            /* ------- MENU ------- */\r\n            Sprites._backgrounds.LevelSelectBG = new createjs.Sprite(LoadManager.Spritesheets.Menu_Level_Select); // Level Select BG\r\n            (Sprites._backgrounds.LevelSelectBG as createjs.Sprite).gotoAndStop(\"static_bg\");\r\n            Sprites._buttons.LevelEmpty = new createjs.Sprite(LoadManager.Spritesheets.Menu_Level_Select); // Level Empty Button\r\n            (Sprites._buttons.LevelEmpty as createjs.Sprite).gotoAndStop(\"level_empty\");\r\n            Sprites._buttons.LevelComplete = new createjs.Sprite(LoadManager.Spritesheets.Menu_Level_Select); // Level Complete Button\r\n            (Sprites._buttons.LevelComplete as createjs.Sprite).gotoAndStop(\"level_complete\");\r\n            Sprites._buttons.LevelSpecialEmpty = new createjs.Sprite(LoadManager.Spritesheets.Menu_Level_Select); // Level Special Empty Button\r\n            (Sprites._buttons.LevelSpecialEmpty as createjs.Sprite).gotoAndStop(\"level_special_empty\");\r\n            Sprites._buttons.LevelSpecialComplete = new createjs.Sprite(LoadManager.Spritesheets.Menu_Level_Select); // Level Special Complete Button\r\n            (Sprites._buttons.LevelSpecialComplete as createjs.Sprite).gotoAndStop(\"level_special_complete\");\r\n\r\n\r\n            /* ------- COMPLEX ------- */\r\n            Sprites._setupBTNClearData();\r\n\r\n            res();\r\n        });\r\n    }\r\n\r\n    // /* --- Complex createjs.Sprite Setup --- */\r\n    private static _setupBTNClearData() {\r\n        Sprites._buttons.ClearData = new createjs.Sprite(LoadManager.Spritesheets.UI); // BTN Clear Data\r\n        (Sprites._buttons.ClearData as createjs.Sprite).gotoAndStop(\"btn_clear_data\");\r\n        (Sprites._buttons.ClearData as createjs.Sprite).cursor = \"pointer\";\r\n        Sprites._canClearData = false;\r\n    }\r\n    public static listenToClearData() {\r\n        //listen\r\n        (Sprites._buttons.ClearData as any).on(\"mousedown\", Sprites._btnDataDown);\r\n        (Sprites._buttons.ClearData as any).on(\"animationend\", Sprites._btnDataComplete);\r\n        (Sprites._buttons.ClearData as any).on(\"click\", Sprites._btnDataUp);\r\n    }\r\n    public static stopListenToClearData() {\r\n        //listen\r\n        (Sprites._buttons.ClearData as any).off(\"mousedown\", Sprites._btnDataDown);\r\n        (Sprites._buttons.ClearData as any).off(\"animationend\", Sprites._btnDataComplete);\r\n        (Sprites._buttons.ClearData as any).off(\"click\", Sprites._btnDataUp);\r\n    }\r\n\r\n    private static _btnDataDown(e) {\r\n        (Sprites._buttons.ClearData as createjs.Sprite).gotoAndPlay(\"btn_clear_data_progress\");\r\n        Sprites._canClearData = true;\r\n    }\r\n    private static _btnDataUp(e) {\r\n        (Sprites._buttons.ClearData as createjs.Sprite).gotoAndStop(\"btn_clear_data\");\r\n        Sprites._canClearData = false;\r\n    }\r\n    private static _btnDataComplete(e) {\r\n        (Sprites._buttons.ClearData as createjs.Sprite).gotoAndStop(\"btn_clear_data\");\r\n        //dispatch event to button\r\n        if(Sprites._canClearData) {\r\n            (Sprites._buttons.ClearData as createjs.Sprite).dispatchEvent(new Event(Sprites.CLEAR_DATA));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**A helper function to generate and cache text for the StageGL object. */\r\n    public static generateText(text, details = \"20px Arial\", color = \"#FFFEEE\") {\r\n        const textObj = new createjs.Text(text, details, color)\r\n        textObj.cache(0, 0, textObj.getBounds().width, textObj.getBounds().height);\r\n        return textObj;\r\n    }\r\n\r\n    public static generateBitmapText(text, spritesheet) {\r\n        const textObj = new createjs.BitmapText(text, spritesheet);\r\n        return textObj;\r\n    }\r\n\r\n\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public static get Backgrounds() { return Sprites._backgrounds; }\r\n    public static get Buttons() { return Sprites._buttons; }\r\n\r\n    // static get BG() { return Sprites._bg }\r\n    // static get Logo() { return Sprites._logo }\r\n    // static get AnimBG() { return Sprites._animBg }\r\n    // static get GameBG() { return Sprites._gameBG }\r\n    // static get GameBGTop() { return Sprites._gameBGTop }\r\n    // //buttons\r\n    // static get BTN_New_Game() { return Sprites._btnNewGame }\r\n    // static get BTN_Options() { return Sprites._btnOptions }\r\n    // static get BTN_Select() { return Sprites._btnSelect }\r\n    // static get BTN_Exit() { return Sprites._btnExit }\r\n    // static get BTN_Fishbowl() { return Sprites._btnFishbowl }\r\n    // static get BTN_ClearData() { return Sprites._btnClearData }\r\n\r\n\r\n    // static get CLEAR_DATA() { return \"onClearData\" }\r\n}","import { Sprites } from \"../Sprites\";\r\nimport { LoadManager } from \"../../managers/LoadManager\";\r\nimport { Game } from \"../../Game\";\r\nimport { IEnableable } from \"../../Interfaces\";\r\nimport { GameScreen } from \"../../screens/GameScreen\";\r\nimport { DataManager } from \"../../managers/DataManager\";\r\nimport { ScreenManager } from \"../../managers/ScreenManager\";\r\nimport { IntermediaryScreen } from \"../../screens/IntermediaryScreen\";\r\n\r\n\r\nexport class LevelSelectDisplay implements IEnableable {\r\n    private _game:Game;\r\n\r\n    private _container:createjs.Container;\r\n    private _background:createjs.Sprite;\r\n    private _levelsContainer:createjs.Container;\r\n    private _levelTextContainer:createjs.Container;\r\n\r\n    private _levelsData:any;\r\n\r\n    private _levelButtons:createjs.Sprite[];\r\n\r\n    constructor(game:Game) {\r\n        this._game = game;\r\n        this._levelButtons = [];\r\n\r\n        //build the required components for the level select display\r\n        this._container = new createjs.Container();\r\n        this._background = Sprites.Backgrounds.LevelSelectBG as createjs.Sprite;\r\n        this._background.x = (game.StageWidth / 2) - (this._background.getBounds().width / 2);\r\n        this._background.y = 80;\r\n\r\n        this._levelsContainer = new createjs.Container();\r\n        this._container.addChild(this._background);\r\n        let text = Sprites.generateBitmapText(\"Level Select\", LoadManager.Spritesheets.Typography);\r\n        text.x = (game.StageWidth / 2) - (text.getBounds().width / 2);\r\n        text.y = 30;\r\n        this._container.addChild(text);\r\n\r\n\r\n        //setup display text\r\n        this._levelTextContainer = new createjs.Container();\r\n        this._container.addChild(this._levelTextContainer);\r\n\r\n        this.LevelText = \"Hello World!\";\r\n\r\n\r\n        //spoof some level data\r\n        this._levelsData = [\r\n            [\r\n                { name: \"Welcome to the pond!\", complete:true, unlocked:true, data:[0, 0, 0, 0, 0, 0, 0] },\r\n                { name: \"A new adventure!\", complete:true, unlocked:true, data:[0, 0, 0, 0, 0, 0, 0] },\r\n                { name: \"Learn to aim!\", complete:false, unlocked:true, data:[0, 0, 0, 0, 0, 0, 0] },\r\n                { name: \"Persephone!\", special:true, complete:false, unlocked:false, data:[0, 0, 0, 0, 0, 0, 0] },\r\n            ],\r\n            [\r\n                { name: \"In deep water!\", complete:false, unlocked:false, data:[0, 0, 0, 0, 0, 0, 0] },\r\n                { name: \"An ocean of fish!\", complete:false, unlocked:false, data:[0, 0, 0, 0, 0, 0, 0] },\r\n                { name: \"Barnacles ahoy!\", complete:false, unlocked:false, data:[0, 0, 0, 0, 0, 0, 0] },\r\n                { name: \"Owen!\", special:true, complete:false, unlocked:false, data:[0, 0, 0, 0, 0, 0, 0] },\r\n            ]\r\n        ];\r\n\r\n\r\n        //build the level icons\r\n        for(let r = 0; r < this._levelsData.length; r++) {\r\n            //iterate through levels\r\n            for(let i = 0; i < this._levelsData[r].length; i++) {\r\n                const levelData = this._levelsData[r][i];\r\n                console.log(\"LEVEL\", levelData);\r\n                //decide the sprite\r\n                let sprite = Sprites.Buttons.LevelEmpty.clone();\r\n                if(levelData.special != null && levelData.special) sprite = Sprites.Buttons.LevelSpecialEmpty.clone();\r\n                // //completed\r\n                if(levelData.complete) {\r\n                    sprite = Sprites.Buttons.LevelComplete.clone();\r\n                    if(levelData.special != null && levelData.special) sprite = Sprites.Buttons.LevelSpecialComplete;\r\n                }\r\n                //locked\r\n                if(!levelData.unlocked) {\r\n                    sprite.alpha = 0.25;\r\n                }\r\n                else {\r\n                    sprite.alpha = 1;\r\n                     //extras\r\n                    sprite.cursor = \"pointer\";\r\n                }\r\n\r\n                //place\r\n                sprite.x = 60 * i;\r\n                sprite.y = 50 * r;\r\n                //add\r\n                this._levelsContainer.addChild(sprite);\r\n                //to array\r\n                this._levelButtons.push(sprite as createjs.Sprite);\r\n            }\r\n        };\r\n\r\n        this._levelsContainer.x = (game.StageWidth / 2) - (this._levelsContainer.getBounds().width / 2);\r\n        this._levelsContainer.y = 100;\r\n        this._container.addChild(this._levelsContainer);\r\n    }\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    public enable() {\r\n        this._levelButtons.forEach(btn => {\r\n            btn.on(\"click\", this._onLevelClick, this);\r\n            btn.on(\"mouseover\", this._onLevelHover, this);\r\n            btn.on(\"mouseout\", this._onLevelUnhover, this);\r\n        });\r\n    }\r\n\r\n    public disable() {\r\n        this._levelButtons.forEach(btn => {\r\n            btn.removeAllEventListeners();\r\n        });\r\n    }\r\n\r\n\r\n    /**Returns level data from the given index. */\r\n    private _getDataByIndex(index:number) {\r\n        //flatten level data, and get data\r\n        let flatten = this._levelsData.reduce((acc, next) => acc.concat(next));\r\n        return flatten[index];\r\n    }\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    private _onLevelClick(e) {\r\n         //get button index\r\n        let index = this._levelButtons.indexOf(e.target);\r\n\r\n        if(index == -1) return;\r\n\r\n        //set the level index\r\n        const data = DataManager.getLevelDataByIndex(index);\r\n        (ScreenManager.getScreenByKey(\"game\") as GameScreen).LevelData = data;\r\n        //go to intermediary screen\r\n        const intermediary = ScreenManager.getScreenByKey(\"intermediary\") as IntermediaryScreen;\r\n        new Promise(async(res) => {\r\n            intermediary.Text = data.name;\r\n            await ScreenManager.setCurrentScreen(intermediary, this._game.Stage);\r\n            intermediary.queueNextScreen(\"game\", 1000);\r\n\r\n            res();\r\n        });\r\n    }\r\n\r\n    private _onLevelHover(e) {\r\n        //find the button data\r\n        //get button index\r\n        let index = this._levelButtons.indexOf(e.target);\r\n        \r\n        if(index != -1) {\r\n            const data = this._getDataByIndex(index);\r\n            if(data != null) {\r\n                if(data.unlocked)\r\n                    this.LevelText = data.name;\r\n            }\r\n        }\r\n\r\n    }\r\n    private _onLevelUnhover(e) {\r\n        this.LevelText = \"\";\r\n    }\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public get Container() { return this._container; }\r\n    public set LevelText(value:string) {\r\n        if(value == \"\") {\r\n            this._levelTextContainer.removeAllChildren();\r\n            return;\r\n        }\r\n        //create the text\r\n        const text = Sprites.generateBitmapText(value, LoadManager.Spritesheets.Typography);\r\n        (text as any).scale = 0.6;\r\n        //load into container\r\n        this._levelTextContainer.removeAllChildren();\r\n        this._levelTextContainer.addChild(text);\r\n\r\n        //put container at bottom\r\n        this._levelTextContainer.x = (this._game.StageWidth / 2) - ((text.getBounds().width / 2) * 0.6);\r\n        this._levelTextContainer.y = this._game.StageHeight - 30;\r\n    }\r\n}","import { Layout } from \"./Layout\";\r\n\r\n/**Uses custom classes and the createjs library to help easily build up ui interfaces with DisplayObjects. */\r\nexport class Container {\r\n    private _sprites:{ [key:string]:createjs.DisplayObject };\r\n    private _container:createjs.Container;\r\n    private _layout:Layout;\r\n\r\n    constructor() {\r\n        this._sprites = { };\r\n        this._container = new createjs.Container();\r\n        this._layout = Layout.MAKE_VERTICAL_CENTER(this._container);\r\n    }\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    public add(key:string, sprite:createjs.DisplayObject, updateLayout:boolean=true):boolean {\r\n        if(this._sprites[key] != null) return false;\r\n        this._sprites[key] = sprite;\r\n\r\n        if(updateLayout) this._layout.buildLayout(true, ...Object.keys(this._sprites).map(k => this._sprites[k]));\r\n        return true;\r\n    }\r\n\r\n    public addMany(sprites:{ [key:string]:createjs.DisplayObject }) {\r\n        Object.keys(sprites).forEach(k => {\r\n            this.add(k, sprites[k], false);\r\n        });\r\n\r\n        this._layout.buildLayout(true, ...Object.keys(this._sprites).map(k => this._sprites[k]));\r\n    }\r\n\r\n    public changeLayout(layout:Layout) {\r\n        this._layout = layout;\r\n    }\r\n\r\n    /**In case of wandering or reusable sprites, call them back to this layout! */\r\n    public checkoutSprites() {\r\n        this._layout.buildLayout(true, ...Object.keys(this._sprites).map(k => this._sprites[k]));\r\n    }\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    public get Container():createjs.Container { return this._container; }\r\n    public get Sprites() { return this._sprites; }\r\n}","import { Game } from \"../../Game\";\r\n\r\n/**Used to layout createjs display objects. */\r\nexport class Layout {\r\n    //justify content\r\n    public static HORIZONTAL:string = \"horizontal\";\r\n    public static VERTICAL:string = \"vertical\";\r\n    //align items\r\n    public static START:string = \"start\";\r\n    public static END:string = \"end\";\r\n    public static CENTER:string = \"center\";\r\n\r\n    private _parent:createjs.Container;\r\n    private _items:createjs.DisplayObject[];\r\n\r\n    private _direction:string;\r\n    private _alignment:string;\r\n    private _crossAlignment:string;\r\n    private _spacing:number;\r\n\r\n    constructor(parent:createjs.Container, direction:string, alignment:string, crossAlignment:string, spacing:number = 5) {\r\n        this._parent = parent;\r\n        this._items = [];\r\n\r\n        this._direction = direction;\r\n        this._alignment = alignment;\r\n        this._crossAlignment = crossAlignment;\r\n        this._spacing = spacing;\r\n    }\r\n\r\n    /*--------------- METHODS ------------------------*/\r\n    public buildLayout(addToParent:boolean=true, ...items:createjs.DisplayObject[]) {\r\n        if(items.length <= 0) return;\r\n\r\n        this._items = items;\r\n\r\n        if(addToParent) {\r\n            this._parent.removeAllChildren();\r\n        }\r\n        \r\n\r\n        if(this._direction == Layout.VERTICAL) {\r\n            // X - CENTER\r\n            let totalHeight = 0;\r\n            if(this._alignment == Layout.CENTER) {\r\n                for(let i = 0; i < items.length; i++) {\r\n                    const item:createjs.DisplayObject = items[i];\r\n                    item.x = (Game.WIDTH / 2) - (item.getBounds().width / 2);\r\n                    item.y = totalHeight;\r\n                    totalHeight += item.getBounds().height + this._spacing;\r\n                    if(addToParent) this._parent.addChild(item);\r\n                }\r\n\r\n                // Y - CENTER\r\n                //handle vertical alignment\r\n                if(this._crossAlignment == Layout.START) {\r\n                    // DO NOTHING, this is the default\r\n                }\r\n                else if(this._crossAlignment == Layout.CENTER) {\r\n                    totalHeight += items[items.length-1].getBounds().height;\r\n                    for(let i = 0; i < items.length; i++) {\r\n                        const item:createjs.DisplayObject = items[i];\r\n                        //decipher desired center\r\n                        item.y += (Game.HEIGHT / 2) - (totalHeight / 2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n\r\n        }\r\n    }\r\n    /*--------------- ABSTRACTS ----------------------*/\r\n    /*--------------- EVENTS -------------------------*/\r\n    /*--------------- OVERRIDES ----------------------*/\r\n    /*--------------- GETTERS & SETTERS --------------*/\r\n    \r\n    /*--------------- HELPER FUNCTIONS ---------------*/\r\n    public static MAKE_VERTICAL_CENTER(container:createjs.Container) { return new Layout(container, Layout.VERTICAL, Layout.CENTER, Layout.CENTER, 5); }\r\n\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}